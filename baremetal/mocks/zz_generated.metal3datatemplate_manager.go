// /*
// Copyright The Kubernetes Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//
//

// Code generated by MockGen. DO NOT EDIT.
// Source: ./baremetal/metal3datatemplate_manager.go

// Package baremetal_mocks is a generated GoMock package.
package baremetal_mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataTemplateManagerInterface is a mock of DataTemplateManagerInterface interface
type MockDataTemplateManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDataTemplateManagerInterfaceMockRecorder
}

// MockDataTemplateManagerInterfaceMockRecorder is the mock recorder for MockDataTemplateManagerInterface
type MockDataTemplateManagerInterfaceMockRecorder struct {
	mock *MockDataTemplateManagerInterface
}

// NewMockDataTemplateManagerInterface creates a new mock instance
func NewMockDataTemplateManagerInterface(ctrl *gomock.Controller) *MockDataTemplateManagerInterface {
	mock := &MockDataTemplateManagerInterface{ctrl: ctrl}
	mock.recorder = &MockDataTemplateManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataTemplateManagerInterface) EXPECT() *MockDataTemplateManagerInterfaceMockRecorder {
	return m.recorder
}

// SetFinalizer mocks base method
func (m *MockDataTemplateManagerInterface) SetFinalizer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFinalizer")
}

// SetFinalizer indicates an expected call of SetFinalizer
func (mr *MockDataTemplateManagerInterfaceMockRecorder) SetFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFinalizer", reflect.TypeOf((*MockDataTemplateManagerInterface)(nil).SetFinalizer))
}

// UnsetFinalizer mocks base method
func (m *MockDataTemplateManagerInterface) UnsetFinalizer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnsetFinalizer")
}

// UnsetFinalizer indicates an expected call of UnsetFinalizer
func (mr *MockDataTemplateManagerInterfaceMockRecorder) UnsetFinalizer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnsetFinalizer", reflect.TypeOf((*MockDataTemplateManagerInterface)(nil).UnsetFinalizer))
}

// RecreateStatusConditionally mocks base method
func (m *MockDataTemplateManagerInterface) RecreateStatusConditionally(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecreateStatusConditionally", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecreateStatusConditionally indicates an expected call of RecreateStatusConditionally
func (mr *MockDataTemplateManagerInterfaceMockRecorder) RecreateStatusConditionally(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecreateStatusConditionally", reflect.TypeOf((*MockDataTemplateManagerInterface)(nil).RecreateStatusConditionally), arg0)
}

// DeleteDatas mocks base method
func (m *MockDataTemplateManagerInterface) DeleteDatas(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDatas", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDatas indicates an expected call of DeleteDatas
func (mr *MockDataTemplateManagerInterfaceMockRecorder) DeleteDatas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDatas", reflect.TypeOf((*MockDataTemplateManagerInterface)(nil).DeleteDatas), arg0)
}

// CreateDatas mocks base method
func (m *MockDataTemplateManagerInterface) CreateDatas(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatas", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDatas indicates an expected call of CreateDatas
func (mr *MockDataTemplateManagerInterfaceMockRecorder) CreateDatas(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatas", reflect.TypeOf((*MockDataTemplateManagerInterface)(nil).CreateDatas), arg0)
}

// DeleteReady mocks base method
func (m *MockDataTemplateManagerInterface) DeleteReady() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReady")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReady indicates an expected call of DeleteReady
func (mr *MockDataTemplateManagerInterfaceMockRecorder) DeleteReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReady", reflect.TypeOf((*MockDataTemplateManagerInterface)(nil).DeleteReady))
}
